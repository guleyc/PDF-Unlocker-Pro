name: 🚀 Build and Release PDF Unlocker Pro

on:
  # Tag push edildiğinde çalış (v1.0.0, v1.1.0 gibi)
  push:
    tags:
      - "v*.*.*"

  # Manuel tetikleme için
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"
      draft:
        description: "Create as draft release"
        required: false
        default: "false"
        type: boolean

env:
  APP_NAME: "PDF_Unlocker_Pro"
  PYTHON_VERSION: "3.11"

jobs:
  # Windows Build
  build-windows:
    name: 🪟 Build for Windows
    runs-on: windows-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Tüm geçmişi al (tag bilgileri için)

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 🏷️ Get Version
        id: version
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $version = "${{ github.event.inputs.version }}"
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
            echo "VERSION_CLEAN=$($version -replace '^v', '')" >> $env:GITHUB_OUTPUT
          } else {
            $version = "${{ github.ref_name }}"
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
            echo "VERSION_CLEAN=$($version -replace '^v', '')" >> $env:GITHUB_OUTPUT
          }
          echo "Building version: $version"

      - name: 🔨 Build Windows Executable
        run: |
          $version = "${{ steps.version.outputs.VERSION }}"
          $exe_name = "${{ env.APP_NAME }}_$version"

          # Icon varsa ekle
          $icon_arg = ""
          if (Test-Path "icon.ico") {
            $icon_arg = "--icon=icon.ico"
          }

          # PyInstaller komutu
          pyinstaller --onefile --windowed --name $exe_name --optimize 2 --noupx --clean $icon_arg pdf_unlocker_pro.py

          # Dosya boyutunu kontrol et
          $exe_path = "dist/$exe_name.exe"
          if (Test-Path $exe_path) {
            $size = (Get-Item $exe_path).Length / 1MB
            Write-Host "✅ Build successful: $exe_name.exe ($([math]::Round($size, 1)) MB)"
          } else {
            Write-Host "❌ Build failed - executable not found"
            exit 1
          }

      - name: 🧪 Test Executable
        run: |
          $version = "${{ steps.version.outputs.VERSION }}"
          $exe_name = "${{ env.APP_NAME }}_$version"
          $exe_path = "dist/$exe_name.exe"

          # Basit test - executable çalışıyor mu?
          # (GUI uygulaması olduğu için sadece var olup olmadığını kontrol ediyoruz)
          if (Test-Path $exe_path) {
            Write-Host "✅ Executable file exists and is ready"
          } else {
            Write-Host "❌ Executable test failed"
            exit 1
          }

      - name: 📁 Upload Windows Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-executable
          path: dist/*.exe
          retention-days: 5

  # Linux Build
  build-linux:
    name: 🐧 Build for Linux
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

          # Linux için tkinter kurulum
          sudo apt-get update
          sudo apt-get install -y python3-tk

      - name: 🏷️ Get Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_CLEAN=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: 🔨 Build Linux Executable
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          EXE_NAME="${{ env.APP_NAME }}_${VERSION}_linux"

          pyinstaller --onefile --windowed --name "$EXE_NAME" --optimize 2 --clean pdf_unlocker_pro.py

          # Dosya izinlerini ayarla
          chmod +x "dist/$EXE_NAME"

          # Dosya boyutunu kontrol et
          if [ -f "dist/$EXE_NAME" ]; then
            SIZE=$(du -m "dist/$EXE_NAME" | cut -f1)
            echo "✅ Build successful: $EXE_NAME ($SIZE MB)"
          else
            echo "❌ Build failed - executable not found"
            exit 1
          fi

      - name: 📁 Upload Linux Artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-executable
          path: dist/*_linux
          retention-days: 5

  # macOS Build
  build-macos:
    name: 🍎 Build for macOS
    runs-on: macos-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 🏷️ Get Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_CLEAN=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: 🔨 Build macOS Executable
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          EXE_NAME="${{ env.APP_NAME }}_${VERSION}_macos"

          pyinstaller --onefile --windowed --name "$EXE_NAME" --optimize 2 --clean pdf_unlocker_pro.py

          # Dosya izinlerini ayarla
          chmod +x "dist/$EXE_NAME"

          # Dosya boyutunu kontrol et
          if [ -f "dist/$EXE_NAME" ]; then
            SIZE=$(du -m "dist/$EXE_NAME" | cut -f1)
            echo "✅ Build successful: $EXE_NAME ($SIZE MB)"
          else
            echo "❌ Build failed - executable not found"
            exit 1
          fi

      - name: 📁 Upload macOS Artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-executable
          path: dist/*_macos
          retention-days: 5

  # Release Creation
  create-release:
    name: 🚀 Create GitHub Release
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Get Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_DRAFT="${{ github.event.inputs.draft }}"
          else
            VERSION="${{ github.ref_name }}"
            IS_DRAFT="false"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_CLEAN=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "IS_DRAFT=$IS_DRAFT" >> $GITHUB_OUTPUT

      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: 📋 List Downloaded Files
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -name "*" | sort

      - name: 📝 Generate Release Notes
        id: release_notes
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          CLEAN_VERSION="${{ steps.version.outputs.VERSION_CLEAN }}"

          # Release notlarını oluştur
          cat > release_notes.md << EOF
          ## 🚀 PDF Unlocker Pro $VERSION

          ### ✨ Features
          - 🖥️ **Modern GUI Interface** - Clean, intuitive user interface
          - 🔐 **Multiple Unlock Methods**:
            - Owner password restrictions removal
            - Common password dictionary attack  
            - Short brute-force cracking (1-3 characters)
          - 📊 **Real-time Progress Tracking** - Live log and progress bar
          - 🚀 **Fast Processing** - Multi-threaded operation
          - 💾 **Auto-naming** - Automatic output file naming
          - 🛡️ **Safe Operation** - No data sent to external servers

          ### 📥 Downloads

          | Platform | Download | Size |
          |----------|----------|------|
          | 🪟 Windows | PDF_Unlocker_Pro_${VERSION}.exe | ~15 MB |
          | 🐧 Linux | PDF_Unlocker_Pro_${VERSION}_linux | ~20 MB |
          | 🍎 macOS | PDF_Unlocker_Pro_${VERSION}_macos | ~18 MB |

          ### 🚀 Quick Start
          1. Download the file for your operating system
          2. Run the executable (no installation required)
          3. Select your locked PDF file
          4. Click "UNLOCK PDF" button
          5. Save the unlocked file

          ### 💻 System Requirements
          - **Windows**: Windows 10/11 (64-bit)
          - **Linux**: Ubuntu 18.04+ or equivalent (with GUI support)
          - **macOS**: macOS 10.14+
          - **RAM**: 256 MB minimum
          - **Storage**: 50 MB free space

          ### 🔒 Security & Privacy
          - ✅ Works completely offline
          - ✅ No data sent to external servers
          - ✅ No installation required
          - ✅ Portable application

          ### ⚖️ Legal Notice
          This tool should only be used on PDF files that you own or have explicit permission to unlock.

          ---
          **Author**: Cagatay Guley | **Website**: [guley.com.tr](https://guley.com.tr)
          EOF

          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🚀 Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: "PDF Unlocker Pro ${{ steps.version.outputs.VERSION }}"
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: ${{ steps.version.outputs.IS_DRAFT == 'true' }}
          prerelease: false
          files: |
            artifacts/windows-executable/*.exe
            artifacts/linux-executable/*_linux
            artifacts/macos-executable/*_macos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ✅ Release Summary
        run: |
          echo "🎉 Release ${{ steps.version.outputs.VERSION }} created successfully!"
          echo "📁 Files included:"
          find artifacts -type f | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "  - $(basename "$file") ($size)"
          done
